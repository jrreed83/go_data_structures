package main

import "fmt"

type List struct {
	Head interface{}
	Tail *List
}

func (l List) Prepend(x interface{}) List {
	if l.Head == nil {
		return List{Head: x, Tail: nil}
	}
	return List{Head: x, Tail: &l}
}

func (l List) IsEmpty() bool {
	return (l.Head == nil) && (l.Tail == nil)
}

func (l List) Append(x interface{}) List {

	runner := &l

	for {
		if runner.Tail == nil {
			fmt.Println(runner.Head)
			runner.Tail = &List{Head: x, Tail: nil}
			return l
		}
		runner = runner.Tail
	}
}

func main() {
	var lst List
	fmt.Println(lst)
	lst = lst.Prepend(1).Prepend(2).Prepend(4)

	lst = lst.Append("new")

	fmt.Println(lst.Tail.Tail.Tail.Head)
}
